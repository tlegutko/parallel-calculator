* DONE Http aspects [6/6]
** DONE content type application/json
** DONE format what's returned to be in json {expression: "blabla"}
** DONE marshalling / demarshalling
   https://doc.akka.io/docs/akka-http/current/scala/http/common/json-support.html
   That's when the exact types are gonna be known.
** DONE test it using curl, as in pdf
** DONE figure out error handling (and code for it)
*** code 422 (UnprocessableEntity)
** DONE change get to post and figure out parameters
* DecimalFormat
 new DecimalFormat("#.##").format(1.199) to get rid of trailing 0 in double
* TODO Expression representation to faciliate parallel computation - biggest question
  1. There are evidently sequential, non-parallelizable parts of computation. (3+2)*4 needs 2 computational stages
  2. There are many strategies for parallelism utilization for this problem
  3. Changing division and subtraction to multiplication allows to reduce number of stages and associativeness
  4. But that could be problematic to handle / or - signs before parentheses
** _My algorithm:_
   1. Consider all expressions with the highest-level nesting of parentheses in parallel
   2. Change division to multiplication and perform them all in parallel
   3. Change subtraction to addition and perform them all in parallel
   4. Remove meaningless parentheses and if expression is not a number, go back to step 1.
** how does akka streams fit with my problem? how to represent it using Streams?
   I've figured out graph facilitating async stages
   Source ~> Fan-Out ~> (async, multiple) ~> DivMulFlow ~> MulEWPF ~> SubAddFlow ~> AddEWPF ~> FanInLooper ~> Sink
   FanInLooper ~> Source
   EWPF - Eval Worker Pool Fixed - async worker pool for multiplication and adding, see https://doc.akka.io/docs/akka/2.5.3/scala/stream/stream-cookbook.html#cookbook-balance
** TODO how do I represent calculation being passed through stream graph to show nesting levels?
* TODO String to Expression parsing
** TODO error cases
*** division by 0
*** poorly formatted, e.g. "1/", "(1+3"
*** spaces
** associativity of operators
** parentheses handling
* TODO technical test in person possible questions:
** what if we were to add exponents or roots or other operations?
* TODO better tests [0/3]
** TODO generate huge test case to somehow test how parallellism is performing
** TODO some http tests (include various errors!)
** TODO string to expr
